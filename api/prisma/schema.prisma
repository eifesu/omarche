generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Market {
    marketId   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    pictureUrl String?   @db.VarChar(255)
    name       String    @unique @db.VarChar(50)
    latitude   Float
    longitude  Float
    isActive   Boolean?  @default(true)
    sellers    Seller[]
    agents     Agent[]
    shippers   Shipper[]
    createdAt  DateTime? @default(now()) @db.Timestamp(6)
    updatedAt  DateTime  @updatedAt
}

model OrderProducts {
    orderProductId String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    orderId        String    @db.Uuid
    productId      String    @db.Uuid
    quantity       Int
    products       Product   @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: NoAction)
    orders         Order     @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: NoAction)
    createdAt      DateTime? @default(now()) @db.Timestamp(6)
    updatedAt      DateTime  @updatedAt
}

model Order {
    orderId            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    userId             String          @db.Uuid
    locationX          Decimal         @db.Decimal(10, 6)
    locationY          Decimal         @db.Decimal(10, 6)
    agentId            String?         @db.Uuid
    shipperId          String?         @db.Uuid
    address            String
    deliveryTime       String          @db.VarChar(50)
    paymentMethod      String          @db.VarChar(50)
    promoCodeId        String?         @db.Uuid
    status             String          @default("IDLE") @db.VarChar(50)
    cancellationReason String?         @db.VarChar(255)
    users              User            @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
    shipper            Shipper?        @relation(fields: [shipperId], references: [shipperId], onDelete: Cascade, onUpdate: NoAction)
    agent              Agent?          @relation(fields: [agentId], references: [agentId], onDelete: Cascade, onUpdate: NoAction)
    orderProducts      OrderProducts[]
    promoCode          PromoCode?      @relation("PromoCodeOrders", fields: [promoCodeId], references: [promoCodeId])
    createdAt          DateTime?       @default(now()) @db.Timestamp(6)
    updatedAt          DateTime        @updatedAt
}

model Product {
    productId     String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    pictureUrl    String[]
    name          String          @db.VarChar(100)
    description   String?
    unit          String          @db.VarChar(50)
    amount        Int
    price         Decimal         @db.Decimal(10, 2)
    category      String          @default("LÃ©gumes") @db.VarChar(50)
    sellerId      String          @db.Uuid
    isInStock     Boolean         @default(true)
    orderProducts OrderProducts[]
    seller        Seller          @relation(fields: [sellerId], references: [sellerId], onDelete: Cascade, onUpdate: NoAction)
    createdAt     DateTime?       @default(now()) @db.Timestamp(6)
    updatedAt     DateTime        @updatedAt

    @@unique([name, sellerId], map: "uc_product")
}

model Seller {
    sellerId    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    marketId    String    @db.Uuid
    pictureUrl  String?   @db.VarChar(255)
    firstName   String    @db.VarChar(50)
    lastName    String    @db.VarChar(50)
    tableNumber Int
    gender      String    @db.VarChar(10)
    isActive    Boolean?  @default(true)
    products    Product[]
    market      Market    @relation(fields: [marketId], references: [marketId], onDelete: Cascade, onUpdate: NoAction)
    createdAt   DateTime? @default(now()) @db.Timestamp(6)
    updatedAt   DateTime  @updatedAt

    @@unique([marketId, tableNumber], map: "uc_tableinmarket")
}

model User {
    userId    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    email     String   @unique @db.VarChar(50)
    password  String   @db.VarChar(255)
    firstName String   @db.VarChar(50)
    lastName  String   @db.VarChar(50)
    city      String   @default("Abidjan") @db.VarChar(50)
    address   String   @db.VarChar(100)
    phone     String   @unique @db.VarChar(50)
    createdAt DateTime @default(now()) @db.Timestamp(6)
    updatedAt DateTime @updatedAt
    orders    Order[]
}

model Agent {
    agentId    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    pictureUrl String?  @db.VarChar(255)
    marketId   String   @db.Uuid
    email      String   @unique @db.VarChar(50)
    password   String   @db.VarChar(255)
    firstName  String   @db.VarChar(50)
    lastName   String   @db.VarChar(50)
    phone      String   @db.VarChar(50)
    role       String   @default("Agent") @db.VarChar(50)
    market     Market   @relation(fields: [marketId], references: [marketId], onDelete: Cascade, onUpdate: NoAction)
    createdAt  DateTime @default(now()) @db.Timestamp(6)
    updatedAt  DateTime @updatedAt
    orders     Order[]

    @@unique([email, marketId], map: "uc_agent")
}

model Shipper {
    shipperId         String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    marketId          String             @db.Uuid
    firstName         String             @db.VarChar(50)
    lastName          String             @db.VarChar(50)
    email             String             @unique @db.VarChar(50)
    password          String             @db.VarChar(255)
    phone             String             @db.VarChar(50)
    pictureUrl        String?            @db.VarChar(255)
    isOnline          Boolean            @default(false)
    availableShippers AvailableShipper[]
    market            Market             @relation(fields: [marketId], references: [marketId], onDelete: Cascade, onUpdate: NoAction)
    orders            Order[]
}

model PromoCode {
    promoCodeId  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    code         String   @unique @db.VarChar(50)
    expiration   DateTime @db.Timestamp(6)
    discountType String
    amount       Decimal  @db.Decimal(10, 2)
    orders       Order[]  @relation("PromoCodeOrders")
}

model AvailableShipper {
    shipperId String   @id @db.Uuid
    shipper   Shipper  @relation(fields: [shipperId], references: [shipperId])
    lastPing  DateTime @default(now())
}

enum status {
    IDLE
    PROCESSING
    PROCESSED
    COLLECTING
    DELIVERING
    DELIVERED
    CANCELED
}

enum category {
    Legumes
    Fruits
    Viandes
    Poissons
    Boissons
    Epices
    Autres
}
